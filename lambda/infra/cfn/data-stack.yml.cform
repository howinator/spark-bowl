---
AWSTemplateFormatVersion: "2010-09-09"
Description: "All the data resources for the backend"

Parameters:
  CodeBucketName:
    Description: Name of the S3 bucket to store the code in
    Type: String
    Default: "howinator-sparkabowl"
  # This should probably be re-factored out to another `aws-setup` repo
  ConfigBucketName:
    Description: Name of the S3 Bucket to store configuration in
    Type: String
    Default: "howinator-configuration"
Resources:
  CodeBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Ref CodeBucketName
  ConfigBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Ref ConfigBucketName
  # From http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html
  ConfigBucketEncryptionPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: "PutObjConfigPolicy"
        Statement:
          -
            Sid: DenyUploadNoKeyConfig
            Action:
              - "s3:PutObject"
            Effect: "Deny"
            Principal: "*"
            Resource: !Sub "arn:aws:s3:::${ConfigBucket}/*"
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption": "aws:kms"
          -
            Sid: DenyUploadCorrectKeyConfig
            Action:
              - "s3:PutObject"
            Effect: "Deny"
            Principal: "*"
            Resource: !Sub "arn:aws:s3:::${ConfigBucket}/*"
            Condition:
              StringNotEquals:
                "s3:x-amz-server-side-encryption-aws-kms-key-id":
                  !Sub "${ConfigBucketKey.Arn}"
    DependsOn:
      - ConfigBucketKey
      - ConfigBucket
  ConfigBucketPolicy:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                "ec2.amazonaws.com"
      Path: "/"
      Rolename: ConfigBucketAccess
  ConfigBucketKey:
    Type: "AWS::KMS::Key"
    # Probably need to add to policy so that lambda and RPi can use it
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-key.html
    Properties:
      Description: key for dealing with encrypted objects
      # KeyPolicy:
      #   Version: "2012-10-17"
      #   Id: "config-s3-bucket-key"
      #   Statement:
      #     -
      #       Sid: "Allow administrators full access to key"
      #       Effect: "Allow"
      #       Principal:
      #         AWS: "arn:aws:iam::742524706181:user/howie"
      #       Action: "*"
      #         # - "kms:Create*"
      #         # - "kms:Describe*"
      #         # - "kms:Enable*"
      #         # - "kms:Put*"
      #         # - "kms:List*"
      #         # - "kms:Update*"
      #         # - "kms:Revoke*"
      #         # - "kms:Disable*"
      #         # - "kms:Get*"
      #         # - "kms:Delete*"
      #         # - "kms:ScheduleKeyDeletion"
      #         # - "kms:CancelKeyDeletion"
      #       Resource: "*"
    DependsOn: ConfigKeyPolicy

Outputs:
  ConfigBucketName:
    Description: Name of the config
    Value: !Ref ConfigBucket
    Export:
      Name: !Sub ${AWS::StackName}-ConfigBucketName
  LambdaCodeBucketName:
    Description: Name of the config
    Value: !Ref CodeBucket
    Export:
      Name: !Sub ${AWS::StackName}-LambdaCodeBucketName
  ConfigBucketKeyID:
    Description: ID of the config bucket key
    Value: !Ref ConfigBucketKey
    Export:
      Name: !Sub ${AWS::StackName}-ConfigBucketKeyID

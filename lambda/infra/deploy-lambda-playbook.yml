---
- hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - vars/lambda.yml

  tasks:

    - name: delte local build directory
      file:
        path: ../build/
        state: absent

    - name: provision an instance
      ec2:
        key_name: Macid_rsa
        group: ssh
        instance_type: t2.nano
        image: ami-c58c1dd3
        wait: true
        region: "{{ region }}"
        instance_tags:
          name: build_sparkabowl
      register: ec2

    - name: Add instance to ec2hosts
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      with_items: "{{ ec2.instances }}"

    - wait_for:
        port: 22
        host: "{{ item.public_ip }}"
        delay: 10
      with_items: "{{ ec2.instances }}"

- hosts: ec2hosts
  user: ec2-user
  become: yes
  gather_facts: true

  vars_files:
    - vars/deploy-vars.yml
    - vars/lambda.yml

  vars:
    venv_name: ".venv-spark"
    venv_path: "{{ deploy_dir }}/{{ venv_name }}"
    python_filename_no_extension: Python-3.6.1
    python_tar_filename: "{{ python_filename_no_extension }}.tgz"
    python_install_dir: /usr/src

  tasks:
    - name: install the requisite packages
      yum:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - "@Development tools"
        - libffi.x86_64
        - libffi-devel.x86_64
        - openssl-devel.x86_64

    - name: Download python source
      get_url:
        url: "https://www.python.org/ftp/python/3.6.1/{{ python_tar_filename }}"
        dest: "{{ python_install_dir }}"

    - name: Unarchive Python
      unarchive:
        remote_src: yes
        src: "{{ python_install_dir }}/{{ python_tar_filename }}"
        dest: "{{ python_install_dir }}"

    - name: Install python 3
      command: "{{ item }}"
      args:
        chdir: "{{ python_install_dir }}/{{ python_filename_no_extension }}"
      with_items:
        - "./configure"
        - "make"
        - "make altinstall"

    - name: Uninstall virtualenv
      pip:
        name: virtualenv
        state: absent

    - name: Install virtualenv
      pip:
        name: "{{ item }}"
      with_items:
        - virtualenv
        - urllib3[secure]

    - name: destroy virtualenv
      file:
        path: "{{ venv_path }}"
        state: absent

    - name: Ensure directory exists
      file:
        path: "{{ deploy_dir }}/{{ item }}"
        state: directory
        mode: 0777
      with_items:
        - 'src'
        - 'infra/requirements'

    - name: copy the source code to the instance
      copy:
        src: "../{{ item }}"
        dest: "{{ deploy_dir }}/{{ item }}"
        owner: ec2-user
        mode: 0777
      with_items:
        - 'src'
        - 'infra/requirements/base.txt'

    - name: make virtualenv
      pip:
        virtualenv: "{{ venv_path }}"
        virtualenv_command: /usr/local/bin/virtualenv
        virtualenv_python: /usr/local/bin/python3.6
        requirements: "{{ deploy_dir }}/infra/requirements/base.txt"

    - name: copy the deploy bundle script to the instance
      copy:
        src: "./build-deploy-bundle.sh"
        dest: "{{ deploy_dir }}/build-deploy-bundle.sh"
        owner: ec2-user
        mode: 0777

    - include: tasks/deploy-tasks.yml

    - name: download the deployment bundle to local machine
      fetch:
        src: "{{ deploy_dir }}/build/{{ bundle_name }}"
        dest: "{{ playbook_dir }}/../build/{{ bundle_name }}"
        flat: yes

- hosts: localhost
  connection: local

  vars_files:
    - vars/lambda.yml

  tasks:

    - name: Set time stamp code path string
      set_fact:
        code_path: "{{ code_path_base }}/{{ ansible_date_time.iso8601 }}/{{ bundle_name }}"

    - name: copy the bundle to s3
      command: "aws s3 cp {{ playbook_dir }}/../build/{{ bundle_name }} s3://{{ code_bucket_name }}/{{ code_path }}"

    - name: get account number
      command: "aws ec2 describe-security-groups --group-names 'Default' --query 'SecurityGroups[0].OwnerId' --output text"
      register: throwaway

    - name: set account number fact
      set_fact:
        aws_account_number: "{{ throwaway.stdout }}"

    - name: set function arn
      set_fact:
        function_arn: "arn:aws:lambda:{{ region }}:{{ aws_account_number }}:function:{{ lambda_function_name }}"

    - name: update the lambda function
      command: "aws lambda update-function-code --function-name {{ function_arn }} --s3-bucket {{ code_bucket_name }} --s3-key {{ code_path }}"

    - name: kill the ec2 instance
      ec2:
        state: 'absent'
        region: "{{ region }}"
        instance_ids: '{{ ec2.instance_ids }}'


---
# Call playbook with `ansible-playbook provision-pi-playbook.yml -i hosts --vault-password-file ~/.vault_pass.txt`
- hosts: raspberries
  become: yes

  vars:
    - pi_users:
        - name: howinator
          comment: "Howie Benefiel"
        - name: sarangj
          comment: "Sarang Joshi"
        - name: eforzano
          comment: "Ernie Forzano"
        - name: etam
          comment: "Emily Tam"

    - pi_ssh_port: 50069
  vars_files:
    - vars/pi-vault.yml


  tasks:

    - name: Create users
      user:
        name: "{{ item.name }}"
        comment: "{{ item.comment }}"
        groups: users,sudo
        group: users
        generate_ssh_key: yes
        ssh_key_bits: 4096
        ssh_key_file: .ssh/id_rsa
      with_items: "{{ pi_users }}"

    - name: make temp directory
      command: mktemp -d
      register: throwaway

    - name: set name of temp dir
      set_fact:
        tmp: "{{ throwaway.stdout }}"

    # - name: Add passwords to users
    #   user:
    #     name: "{{ item.key }}"
    #     password: "{{ item.value.password }}"
    #   with_dict: "{{ users_passwords }}"

    - name: set no password for sudo for howie and sarang
      lineinfile:
        dest: /etc/sudoers
        line: "{{ item }} ALL=(ALL) NOPASSWD:ALL"
        state: present
      with_items:
        - howinator
        - sarangj

    - name: make authorized keys for everyone
      file:
        path: "/home/{{ item.name }}/.ssh/authorized_keys"
        state: touch
      with_items:
        - "{{ pi_users }}"

    - name: copy ssh key to authorized keys
      authorized_key:
        user: howinator
        key: "{{ lookup('file', '/Users/howie/.ssh/id_rsa.pub') }}"

    - name: make go workspace
      file:
        path: "/home/{{ item[1].name }}/{{ item[0] }}"
        owner: "{{ item[1].name }}"
        mode: "u=rwx,g=rx,o=rx"
        state: directory
      with_nested:
        - [ 'work', 'work/src', 'work/bin', 'work/pkg' ]
        - "{{ pi_users }}"

    - name: Disable password authentication for ssh
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'

    - name: Change ssh port
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^Port [0-9]+'
        line: 'Port {{ pi_ssh_port }}'
      notify:
        - restart ssh

    - name: install apt packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - vim
        - llvm-3.7
        - screen

    - name: set name of go binary to download
      set_fact:
        go_binary: "go1.7.4.linux-armv6l.tar.gz"

    - name: unarchive binary
      unarchive:
        src: "https://storage.googleapis.com/golang/go1.7.4.linux-armv6l.tar.gz"
        dest: /usr/local
        remote_src: yes

    - name: add go path to all paths
      lineinfile:
        dest: "/etc/profile"
        line: 'export PATH=$PATH:/usr/local/go/bin'
        state: present

    - name: add go path for all users
      lineinfile:
        dest: "/home/{{ item.name }}/.profile"
        line: 'export GOPATH=$HOME/work'
        state: present
      with_items:
        - "{{ pi_users }}"

    - name: making symlinks
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      with_items:
        - { src: /usr/bin/opt-3.7, dest: /usr/bin/opt }
        - { src: /usr/bin/llc-3.7, dest: /usr/bin/llc }

    - block:
      - name: Check to see if haskell files exist
        stat:
          path: ~/.stack/programs/arm-linux/ghc-8.0.1/bin/ghc
        register: ghc

      - name: Install Haskell stack
        shell: 'curl -sSL https://get.haskellstack.org/ | sh'
        when: ghc.stat.exists == False

      - block:
        - name: Install GHC and GHCi
          shell: "stack update && stack setup"
        always:
        - name: Change setting in haskell settings to get it to work
          lineinfile:
            dest: "~/.stack/programs/arm-linux/ghc-8.0.1/lib/ghc-8.0.1/settings"
            regexp: "^.*C compiler flags.*"
            line: |
              ("C compiler flags", " -marm -fno-stack-protector -mcpu=cortex-a7"),
      become_user: howinator

  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted
